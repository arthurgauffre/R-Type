name: ci
run-name: ${{github.actor}} verifying my code

on:
  push:
    branches-ignore:
      - " ga-ignore-"
  pull_request:
    branches-ignore:
      - " ga-ignore-"

jobs:
  auto_format:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.repository == 'JsuisSayker/R-Type'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: clang-format
        run: ./format.sh
      - name: Check for modified files
        id: git-check
        run: echo "modified=$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)" >> $GITHUB_OUTPUT
      - name: Push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        if: steps.git-check.outputs.modified == 'true'
        with:
          commit_message: Automated Change

  check_linux_program_compilation:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: auto_format
    # container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout GH repository
        uses: actions/checkout@master
        with:
          repository: ""

      - name: Cache CMake build
        id: cache-cmake
        uses: actions/cache@v3
        env:
          cache-name: cache-cmake-build
        with:
          # Cache the CMake build directory
          path: ./build
          key: ${{ runner.os }}-build-${{ env.cache-name}}-
          restore-keys: |
            ${{ runner.os }}-build--${{ env.cache-name}}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Download SFML
        run: sudo apt-get install libsfml-dev

      - name: Configure CMake
        run: cmake -S . -B build

      - name: Build project
        run: cmake --build build -j $(nproc)

      - if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
        name: Notify cache miss
        run: echo "Cache was not hit. Building from scratch."

      - name: Check file
        run: |
          for file in ${{ vars.EXECUTABLES }};do
             if [ ! -x "./build/$file" ]; then
              echo"File $file does not exist or is not executable"
              exit 1
            fi
          done

  check_windows_program_compilation:
    runs-on: windows-latest
    timeout-minutes: 3
    needs: auto_format
    # container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout GH repository
        uses: actions/checkout@master
        with:
          repository: ""

      - name: Cache CMake build
        id: cache-cmake
        uses: actions/cache@v3
        env:
          cache-name: cache-cmake-build
        with:
          # Cache the CMake build directory
          path: ./build
          key: ${{ runner.os }}-build-${{ env.cache-name}}-
          restore-keys: |
            ${{ runner.os }}-build--${{ env.cache-name}}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Configure CMake
        run: cmake -S . -B build

      - name: Build project
        run: cmake --build build

      - if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
        name: Notify cache miss
        run: echo "Cache was not hit. Building from scratch."

      - name: Check file
        shell: cmd
        run: |
          set executables=${{ vars.EXECUTABLES }}
          for %%f in (%executables%) do (
            if not exist "%%f.exe" (
              echo File %%f.exe does not exist at the root of the project.
              exit /b 1
            )
          )

  # run_tests:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 2
  #   container: epitechcontent/epitest-docker:latest
  #   needs:  check_program_compilation
  #   steps:

  #     - name: Checkout GH repository
  #       uses: actions/checkout@master
  #       with:
  #         repository: ''

  #     - name: Compile tests binaries
  #       run: make tests_run

  push_to_mirror:
    runs-on: ubuntu-latest
    # needs:  run_tests
    needs: [check_linux_program_compilation, check_windows_program_compilation]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ vars.MIRROR_URL }}
          ssh_private_key: # <-- use 'secrets' to pass credential information.
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}