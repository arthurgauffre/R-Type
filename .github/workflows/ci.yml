name: ci
run-name: ${{github.actor}} verifying my code

on:
  push:
    branches-ignore:
      - " ga-ignore-"
  pull_request:
    branches-ignore:
      - " ga-ignore-"

jobs:
  auto_format:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.repository == 'arthurgauffre/R-Type'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: clang-format
        run: ./format.sh
      - name: Check for modified files
        id: git-check
        run: echo "modified=$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)" >> $GITHUB_OUTPUT
      - name: Push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        if: steps.git-check.outputs.modified == 'true'
        with:
          commit_message: Automated Change

  check_linux_program_compilation:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: auto_format
    # container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout GH repository
        uses: actions/checkout@master
        with:
          repository: ""

      - name: Cache CMake build
        id: cache-cmake
        uses: actions/cache@v4
        env:
          cache-name: cache-cmake-build
        with:
          # Cache the CMake build directory
          path: ./build
          key: ${{ runner.os }}-build-${{ env.cache-name}}-
          restore-keys: |
            ${{ runner.os }}-build--${{ env.cache-name}}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Download SFML
        run: sudo apt-get install libsfml-dev

      - name: Configure CMake
        run: cmake -S . -B build

      - name: Build project
        run: cmake --build build -j $(nproc)

      - if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
        name: Notify cache miss
        run: echo "Cache was not hit. Building from scratch."

      - name: Check file
        run: |
          for file in ${{ vars.EXECUTABLES }};do
             if [ ! -x "./build/$file" ]; then
              echo"File $file does not exist or is not executable"
              exit 1
            fi
          done

  check_windows_program_compilation:
    runs-on: windows-latest
    timeout-minutes: 15
    needs: auto_format
    # container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout GH repository
        uses: actions/checkout@master
        with:
          repository: ""

      - name: Cache vcpkg Install
        id: cache-vcpkg
        uses: actions/cache@v4
        env:
          cache-name: cache-vcpkg-install
        with:
          path: C:/vcpkg
          key: ${{ runner.os }}-vcpkg-install-${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-install-${{ env.cache-name }}-

      - name: Cache CMake build
        id: cache-cmake
        uses: actions/cache@v4
        env:
          cache-name: cache-cmake-build
        with:
          # Cache the CMake build directory
          path: ./build
          key: ${{ runner.os }}-build-${{ env.cache-name}}-
          restore-keys: |
            ${{ runner.os }}-build--${{ env.cache-name}}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Compile using CMake
        run: cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build project
        run: cmake --build build

      - if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
        name: Notify cache miss
        run: echo "Cache was not hit. Building from scratch."

      - name: Check file
        shell: cmd
        run: |
          set executables=${{ vars.EXECUTABLES }}
          for %%f in (%executables%) do (
            if not exist "%%f.exe" (
              echo File %%f.exe does not exist at the root of the project.
              exit /b 1
            )
          )

  generate_docs:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: check_linux_program_compilation
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up cache for Doxygen
        id: cache-doxygen
        uses: actions/cache@v3
        with:
          path: docs/html
          key: ${{ runner.os }}-doxygen-${{ hashFiles('**/*.cpp', '**/*.h', 'Doxyfile') }}
          restore-keys: |
            ${{ runner.os }}-doxygen-

      - name: Install Doxygen and Graphviz
        if: steps.cache-doxygen.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz

      - name: Configure Doxygen
        if: steps.cache-doxygen.outputs.cache-hit != 'true'
        run: |
          # Generate a default Doxyfile if it doesn't exist
          if [ ! -f Doxyfile ]; then
            doxygen -g
          fi
          # Update Doxyfile settings
          sed -i 's/^PROJECT_NAME.*/PROJECT_NAME = "R-Type"/' Doxyfile
          sed -i 's/^OUTPUT_DIRECTORY.*/OUTPUT_DIRECTORY = docs/' Doxyfile
          sed -i 's/^GENERATE_LATEX.*/GENERATE_LATEX = NO/' Doxyfile
          sed -i 's/^RECURSIVE.*/RECURSIVE = YES/' Doxyfile
          sed -i 's/^GENERATE_HTML.*/GENERATE_HTML = YES/' Doxyfile

      - name: Generate Doxygen documentation
        if: steps.cache-doxygen.outputs.cache-hit != 'true'
        run: |
          doxygen Doxyfile | tee doxygen_output.log

      - name: Deploy Doxygen documentation
        if: steps.cache-doxygen.outputs.cache-hit != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin
          git switch --orphan gh-pages || git checkout gh-pages
          # rm -rf *
          if [ -d "docs/html" ] && [ "$(ls -A docs/html)" ]; then
            # add the file named index.html that is my docs folder in my real project at the root of the gh-pages branch
            cp docs/html/index.html .

            cp -r docs/html/* .
            touch .nojekyll  # Disable Jekyll to enable support for files and directories starting with underscore
            git add --all
            git commit -m "Deploy Doxygen documentation to GitHub Pages"
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/JsuisSayker/R-Type.git gh-pages --force
          else
            echo "No documentation generated. Skipping deployment."
          fi




  push_to_mirror:
    runs-on: ubuntu-latest
    # needs:  run_tests
    needs: [check_linux_program_compilation, check_windows_program_compilation, generate_docs]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ vars.MIRROR_URL }}
          ssh_private_key: # <-- use 'secrets' to pass credential information.
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}