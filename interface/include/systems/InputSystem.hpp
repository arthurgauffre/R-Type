/*
** EPITECH PROJECT, 2024
** R-Type
** File description:
** InputSystem
*/

#pragma once

#include <components/CooldownComponent.hpp>
#include <components/InputComponent.hpp>
#include <components/WeaponComponent.hpp>
#include <r-type/ASystem.hpp>

#include <iostream>

namespace ECS_system {
class InputSystem : public ASystem {
public:
  /**
   * @class InputSystem
   * @brief A system responsible for handling input-related operations.
   *
   * @param componentManager Reference to the ComponentManager instance.
   * @param entityManager Reference to the EntityManager instance.
   * @param graphic Shared pointer to an IGraphic instance.
   * @param stringCom StringCom instance for communication.
   */
  InputSystem(component::ComponentManager &componentManager,
              entity::EntityManager &entityManager, std::shared_ptr<IGraphic> graphic, std::shared_ptr<IAudio> audio, StringCom stringCom)
      : ASystem(componentManager, entityManager, graphic, audio, stringCom) {}

  /**
   * @brief Default destructor for the InputSystem class.
   *
   * This destructor is automatically generated by the compiler and is used to clean up resources
   * when an instance of InputSystem is destroyed. Since it is marked as default, it indicates that
   * the compiler should generate the default implementation.
   */
  ~InputSystem() = default;

  /**
   * @brief Updates the input system.
   *
   * This function processes input actions and updates the state of entities accordingly.
   *
   * @param deltaTime The time elapsed since the last update.
   * @param entities A vector of shared pointers to the entities to be updated.
   * @param msgToSend A reference to a vector of pairs containing actions and their corresponding entity IDs to be sent.
   * @param msgReceived A reference to a vector of pairs containing messages and their corresponding sender and receiver IDs.
   * @param entityMutex A reference to a mutex for synchronizing access to entities.
   * @param sceneStatus A shared pointer to the current scene status.
   */
  void
  update(float deltaTime,
         std::vector<std::shared_ptr<entity::IEntity>> entities,
         std::vector<std::pair<Action, size_t>> &msgToSend, std::vector<std::pair<std::string, std::pair<size_t, size_t>>> &msgReceived, std::mutex &entityMutex, std::shared_ptr<Scene> &sceneStatus) override;

  /**
   * @brief Initializes the input system.
   *
   * This function is called to set up any necessary resources or state
   * for the input system. Currently, it does not perform any actions.
   */
  void initialize() override {}

  /**
   * @brief Handles the components associated with the input system.
   *
   * This function is an override of the base class method to handle
   * the components specific to the input system. Currently, it does
   * not perform any operations.
   */
  void handleComponents() override {}

private:
};
} // namespace ECS_system